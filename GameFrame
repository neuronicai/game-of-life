import numpy as np

class GameFrame(object):
    def __init__(self, dim = (20,20), initArray = [0]):
        self.dim = dim
        if initArray != [0]:
            self.array_ = initArray
        else:
            self.array_ = np.zeros(self.dim)
        
    def save(self):
        # Method for saving a state into self.initial_ before mutating. Allows "rollback" method.
        self.initial_ = self.array_.copy()
        
    def randomState(self, probability, seed = None):
        # Creates a frame where each space has user-specified probability of being activated.
        self.save()
        np.random.seed(seed)
        self.array_ = np.where(np.random.rand(self.dim[0],self.dim[1]) < probability, 0, 1)
    
    def turnOn(self, loc):
        # Accepts list of tuples in "loc" and turns on cells at location in each tuple.
        self.save()
        if len(loc) == 1:
            self.array_[loc] = 1
        else:
            for x in range(len(loc)):
                self.array_[loc[x]] = 1
                
    def turnOff(self, loc):
        # Same as turnOn method, but the opposite.
        self.save()
        if len(loc) == 1:
            self.array_[loc] = 0
        else:
            for x in range(len(loc)):
                self.array_[loc[x]] = 0
                
    def rollback(self):
        # "Wait, no, I wanna go back."
        self.array_ = self.initial_.copy()
        
    def show(self):
        print(self.array_)
                
    def evolve(self, iterations = 1, wrap = False, show = False):
        # Main method for evolving the GameFrame according to the rules of Conway's Game of Life.
        self.save()
        
        for i in range(iterations):
            # Performs the actual evolution rules.
            
            if iterations*self.initial_.size > 100000:
                # Don't want huge loops!
                print('Too many iterations for board size.')
                break
            
            old_state = self.array_.copy()
            
            for index, x in np.ndenumerate(old_state):
                ''' For troubleshooting
                print("Adjacent to", index)
                '''
                
                adj_living, true_adjacencies, life_check = checkAdjacent(index, old_state, wrap)
                
                ''' For troubleshooting
                print('Adjacent cells: ', true_adjacencies)
                print('Adjacent living =',life_check, adj_living)
                '''

                if adj_living == 3:
                    self.array_[index] = 1
                elif adj_living == 2:
                    self.array_[index] = old_state[index]
                else:
                    self.array_[index] = 0
                
                ''' For troubleshooting
                print("Following adjancency check... \n", old_state)
                print("\n")
                '''
                
            if show:
                print('Iteration ', i+1)
                self.show()
                
def checkAdjacent(index_, state, wrap_):
    
    #defining all adjacent indices to current index
    test_adjacencies_ = [
        [index_[0]-1,index_[1]-1],
        [index_[0]-1,index_[1]],
        [index_[0]-1,index_[1]+1],
        [index_[0],index_[1]-1],
        [index_[0],index_[1]+1],
        [index_[0]+1,index_[1]-1],
        [index_[0]+1,index_[1]],
        [index_[0]+1,index_[1]+1]
                ]
    adj_living_ = 0
    true_adjacencies_ = []
    life_check_ = []
    
    for n, p in enumerate(test_adjacencies_): 
        # This loop determines the true adjacent cells and adds up the live adjacent cells.
        # Checks if the adjacencies are valid indices, and if Wrap = True, finds the true index.
        # This loop also finds adjacent live cells.
            nonnegative_row = p[0] >= 0 
            nonnegative_col = p[1] >= 0
            bounded_row = p[0] < state.shape[0]
            bounded_col = p[1] < state.shape[1]
            always_valid = nonnegative_row and nonnegative_col and bounded_row and bounded_col
                    
            if always_valid:
                true_adjacencies_.append(p)
                if state[p[0],p[1]] == 1:
                    adj_living_ += 1
                    life_check_.append(p)
                    
            if not always_valid and wrap_:
                if not bounded_row:
                    p[0] -= state.shape[0]
                    true_adjacencies_.append(p)
                if not bounded_col:
                    p[1] -= state.shape[1]
                    true_adjacencies_.append(p)
                if state[p[0],p[1]] == 1:
                    adj_living_ += 1
                        
    return adj_living_, true_adjacencies_, life_check_
